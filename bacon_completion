#!/usr/bin/env bash
#
# bacon Bash Completion
# =======================
#
# Bash completion support for the `bacon` command,
# generated by [picocli](https://picocli.info/) version 4.7.7.
#
# Installation
# ------------
#
# 1. Source all completion scripts in your .bash_profile
#
#   cd $YOUR_APP_HOME/bin
#   for f in $(find . -name "*_completion"); do line=". $(pwd)/$f"; grep "$line" ~/.bash_profile || echo "$line" >> ~/.bash_profile; done
#
# 2. Open a new bash console, and type `bacon [TAB][TAB]`
#
# 1a. Alternatively, if you have [bash-completion](https://github.com/scop/bash-completion) installed:
#     Place this file in a `bash-completion.d` folder:
#
#   * /etc/bash-completion.d
#   * /usr/local/etc/bash-completion.d
#   * ~/bash-completion.d
#
# Documentation
# -------------
# The script is called by bash whenever [TAB] or [TAB][TAB] is pressed after
# 'bacon (..)'. By reading entered command line parameters,
# it determines possible bash completions and writes them to the COMPREPLY variable.
# Bash then completes the user input if only one entry is listed in the variable or
# shows the options if more than one is listed in COMPREPLY.
#
# References
# ----------
# [1] http://stackoverflow.com/a/12495480/1440785
# [2] http://tiswww.case.edu/php/chet/bash/FAQ
# [3] https://www.gnu.org/software/bash/manual/html_node/The-Shopt-Builtin.html
# [4] http://zsh.sourceforge.net/Doc/Release/Options.html#index-COMPLETE_005fALIASES
# [5] https://stackoverflow.com/questions/17042057/bash-check-element-in-array-for-elements-in-another-array/17042655#17042655
# [6] https://www.gnu.org/software/bash/manual/html_node/Programmable-Completion.html#Programmable-Completion
# [7] https://stackoverflow.com/questions/3249432/can-a-bash-tab-completion-script-be-used-in-zsh/27853970#27853970
#

if [ -n "$BASH_VERSION" ]; then
  # Enable programmable completion facilities when using bash (see [3])
  shopt -s progcomp
elif [ -n "$ZSH_VERSION" ]; then
  # Make alias a distinct command for completion purposes when using zsh (see [4])
  setopt COMPLETE_ALIASES
  alias compopt=complete

  # Enable bash completion in zsh (see [7])
  # Only initialize completions module once to avoid unregistering existing completions.
  if ! type compdef > /dev/null; then
    autoload -U +X compinit && compinit
  fi
  autoload -U +X bashcompinit && bashcompinit
fi

# CompWordsContainsArray takes an array and then checks
# if all elements of this array are in the global COMP_WORDS array.
#
# Returns zero (no error) if all elements of the array are in the COMP_WORDS array,
# otherwise returns 1 (error).
function CompWordsContainsArray() {
  declare -a localArray
  localArray=("$@")
  local findme
  for findme in "${localArray[@]}"; do
    if ElementNotInCompWords "$findme"; then return 1; fi
  done
  return 0
}
function ElementNotInCompWords() {
  local findme="$1"
  local element
  for element in "${COMP_WORDS[@]}"; do
    if [[ "$findme" = "$element" ]]; then return 1; fi
  done
  return 0
}

# The `currentPositionalIndex` function calculates the index of the current positional parameter.
#
# currentPositionalIndex takes three parameters:
# the command name,
# a space-separated string with the names of options that take a parameter, and
# a space-separated string with the names of boolean options (that don't take any params).
# When done, this function echos the current positional index to std_out.
#
# Example usage:
# local currIndex=$(currentPositionalIndex "mysubcommand" "$ARG_OPTS" "$FLAG_OPTS")
function currentPositionalIndex() {
  local commandName="$1"
  local optionsWithArgs="$2"
  local booleanOptions="$3"
  local previousWord
  local result=0

  for i in $(seq $((COMP_CWORD - 1)) -1 0); do
    previousWord=${COMP_WORDS[i]}
    if [ "${previousWord}" = "$commandName" ]; then
      break
    fi
    if [[ "${optionsWithArgs}" =~ ${previousWord} ]]; then
      ((result-=2)) # Arg option and its value not counted as positional param
    elif [[ "${booleanOptions}" =~ ${previousWord} ]]; then
      ((result-=1)) # Flag option itself not counted as positional param
    fi
    ((result++))
  done
  echo "$result"
}

# compReplyArray generates a list of completion suggestions based on an array, ensuring all values are properly escaped.
#
# compReplyArray takes a single parameter: the array of options to be displayed
#
# The output is echoed to std_out, one option per line.
#
# Example usage:
# local options=("foo", "bar", "baz")
# local IFS=$'\n'
# COMPREPLY=($(compReplyArray "${options[@]}"))
function compReplyArray() {
  declare -a options
  options=("$@")
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local i
  local quoted
  local optionList=()

  for (( i=0; i<${#options[@]}; i++ )); do
    # Double escape, since we want escaped values, but compgen -W expands the argument
    printf -v quoted %q "${options[i]}"
    quoted=\'${quoted//\'/\'\\\'\'}\'

    optionList[i]=$quoted
  done

  # We also have to add another round of escaping to $curr_word.
  curr_word=${curr_word//\\/\\\\}
  curr_word=${curr_word//\'/\\\'}

  # Actually generate completions.
  local IFS=$'\n'
  echo -e "$(compgen -W "${optionList[*]}" -- "$curr_word")"
}

# Bash completion entry point function.
# _complete_bacon finds which commands and subcommands have been specified
# on the command line and delegates to the appropriate function
# to generate possible options and subcommands for the last specified subcommand.
function _complete_bacon() {
  # Edge case: if command line has no space after subcommand, then don't assume this subcommand is selected (remkop/picocli#1468).
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} da" ];    then _picocli_bacon; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pig" ];    then _picocli_bacon; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc" ];    then _picocli_bacon; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} da blocklist" ];    then _picocli_bacon_da; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} da lookup" ];    then _picocli_bacon_da; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} da reports" ];    then _picocli_bacon_da; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} da blocklist list" ];    then _picocli_bacon_da_blocklist; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} da blocklist add" ];    then _picocli_bacon_da_blocklist; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} da lookup maven" ];    then _picocli_bacon_da_lookup; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} da lookup maven-versions" ];    then _picocli_bacon_da_lookup; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} da lookup maven-latest" ];    then _picocli_bacon_da_lookup; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} da lookup npm" ];    then _picocli_bacon_da_lookup; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} da lookup npm-versions" ];    then _picocli_bacon_da_lookup; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} da reports scm" ];    then _picocli_bacon_da_reports; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} da reports scm-advanced" ];    then _picocli_bacon_da_reports; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} da reports align" ];    then _picocli_bacon_da_reports; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} da reports built" ];    then _picocli_bacon_da_reports; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} da reports lookup-versions-npm" ];    then _picocli_bacon_da_reports; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pig cachi2lockfile" ];    then _picocli_bacon_pig; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pig configure" ];    then _picocli_bacon_pig; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pig cancel" ];    then _picocli_bacon_pig; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pig build" ];    then _picocli_bacon_pig; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pig run" ];    then _picocli_bacon_pig; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pig repo" ];    then _picocli_bacon_pig; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pig licenses" ];    then _picocli_bacon_pig; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pig javadocs" ];    then _picocli_bacon_pig; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pig sources" ];    then _picocli_bacon_pig; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pig shared-content" ];    then _picocli_bacon_pig; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pig docs" ];    then _picocli_bacon_pig; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pig release" ];    then _picocli_bacon_pig; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pig pre-process-yaml" ];    then _picocli_bacon_pig; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pig addons" ];    then _picocli_bacon_pig; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pig export" ];    then _picocli_bacon_pig; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pig export build-config" ];    then _picocli_bacon_pig_export; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc admin" ];    then _picocli_bacon_pnc; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc artifact" ];    then _picocli_bacon_pnc; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc brew-push" ];    then _picocli_bacon_pnc; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc build" ];    then _picocli_bacon_pnc; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc build-config" ];    then _picocli_bacon_pnc; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc environment" ];    then _picocli_bacon_pnc; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc deliverable-analysis" ];    then _picocli_bacon_pnc; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc group-build" ];    then _picocli_bacon_pnc; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc group-config" ];    then _picocli_bacon_pnc; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc product" ];    then _picocli_bacon_pnc; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc product-milestone" ];    then _picocli_bacon_pnc; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc product-release" ];    then _picocli_bacon_pnc; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc product-version" ];    then _picocli_bacon_pnc; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc project" ];    then _picocli_bacon_pnc; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc scm-repository" ];    then _picocli_bacon_pnc; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc whoami" ];    then _picocli_bacon_pnc; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc admin pnc-status" ];    then _picocli_bacon_pnc_admin; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc admin rex" ];    then _picocli_bacon_pnc_admin; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc admin pnc-status set" ];    then _picocli_bacon_pnc_admin_pncstatus; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc admin pnc-status get" ];    then _picocli_bacon_pnc_admin_pncstatus; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc admin rex clear-all" ];    then _picocli_bacon_pnc_admin_rex; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc admin rex get" ];    then _picocli_bacon_pnc_admin_rex; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc artifact get" ];    then _picocli_bacon_pnc_artifact; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc artifact get-gav" ];    then _picocli_bacon_pnc_artifact; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc artifact list-from-hash" ];    then _picocli_bacon_pnc_artifact; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc artifact usage" ];    then _picocli_bacon_pnc_artifact; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc artifact usage-gav" ];    then _picocli_bacon_pnc_artifact; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc brew-push build" ];    then _picocli_bacon_pnc_brewpush; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc brew-push group-build" ];    then _picocli_bacon_pnc_brewpush; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc brew-push status" ];    then _picocli_bacon_pnc_brewpush; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc build start" ];    then _picocli_bacon_pnc_build; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc build cancel" ];    then _picocli_bacon_pnc_build; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc build list" ];    then _picocli_bacon_pnc_build; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc build list-built-artifacts" ];    then _picocli_bacon_pnc_build; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc build list-dependencies" ];    then _picocli_bacon_pnc_build; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc build get" ];    then _picocli_bacon_pnc_build; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc build get-revision" ];    then _picocli_bacon_pnc_build; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc build get-log" ];    then _picocli_bacon_pnc_build; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc build get-align-log" ];    then _picocli_bacon_pnc_build; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc build download-sources" ];    then _picocli_bacon_pnc_build; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc build-config create" ];    then _picocli_bacon_pnc_buildconfig; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc build-config create-with-scm" ];    then _picocli_bacon_pnc_buildconfig; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc build-config get" ];    then _picocli_bacon_pnc_buildconfig; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc build-config get-revision" ];    then _picocli_bacon_pnc_buildconfig; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc build-config list" ];    then _picocli_bacon_pnc_buildconfig; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc build-config list-revisions" ];    then _picocli_bacon_pnc_buildconfig; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc build-config list-builds" ];    then _picocli_bacon_pnc_buildconfig; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc build-config update" ];    then _picocli_bacon_pnc_buildconfig; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc build-config clone" ];    then _picocli_bacon_pnc_buildconfig; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc build-config create-revision" ];    then _picocli_bacon_pnc_buildconfig; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc build-config add-dependency" ];    then _picocli_bacon_pnc_buildconfig; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc build-config remove-dependency" ];    then _picocli_bacon_pnc_buildconfig; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc environment get" ];    then _picocli_bacon_pnc_environment; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc environment list" ];    then _picocli_bacon_pnc_environment; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc deliverable-analysis add-label" ];    then _picocli_bacon_pnc_deliverableanalysis; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc deliverable-analysis get" ];    then _picocli_bacon_pnc_deliverableanalysis; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc deliverable-analysis get-analyzed" ];    then _picocli_bacon_pnc_deliverableanalysis; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc deliverable-analysis get-label-history" ];    then _picocli_bacon_pnc_deliverableanalysis; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc deliverable-analysis list" ];    then _picocli_bacon_pnc_deliverableanalysis; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc deliverable-analysis remove-label" ];    then _picocli_bacon_pnc_deliverableanalysis; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc group-build start" ];    then _picocli_bacon_pnc_groupbuild; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc group-build cancel" ];    then _picocli_bacon_pnc_groupbuild; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc group-build list" ];    then _picocli_bacon_pnc_groupbuild; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc group-build list-builds" ];    then _picocli_bacon_pnc_groupbuild; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc group-build get" ];    then _picocli_bacon_pnc_groupbuild; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc group-config create" ];    then _picocli_bacon_pnc_groupconfig; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc group-config update" ];    then _picocli_bacon_pnc_groupconfig; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc group-config list" ];    then _picocli_bacon_pnc_groupconfig; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc group-config list-build-configs" ];    then _picocli_bacon_pnc_groupconfig; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc group-config get" ];    then _picocli_bacon_pnc_groupconfig; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc group-config add-build-config" ];    then _picocli_bacon_pnc_groupconfig; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc group-config remove-build-config" ];    then _picocli_bacon_pnc_groupconfig; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc group-config show-latest-build" ];    then _picocli_bacon_pnc_groupconfig; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc product create" ];    then _picocli_bacon_pnc_product; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc product get" ];    then _picocli_bacon_pnc_product; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc product list" ];    then _picocli_bacon_pnc_product; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc product list-versions" ];    then _picocli_bacon_pnc_product; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc product update" ];    then _picocli_bacon_pnc_product; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc product-milestone create" ];    then _picocli_bacon_pnc_productmilestone; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc product-milestone update" ];    then _picocli_bacon_pnc_productmilestone; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc product-milestone cancel-milestone-close" ];    then _picocli_bacon_pnc_productmilestone; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc product-milestone get" ];    then _picocli_bacon_pnc_productmilestone; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc product-milestone list-performed-builds" ];    then _picocli_bacon_pnc_productmilestone; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc product-milestone close" ];    then _picocli_bacon_pnc_productmilestone; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc product-milestone analyze-deliverables" ];    then _picocli_bacon_pnc_productmilestone; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc product-milestone list-delivered-artifacts" ];    then _picocli_bacon_pnc_productmilestone; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc product-milestone get-deliverables-analysis" ];    then _picocli_bacon_pnc_productmilestone; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc product-release create" ];    then _picocli_bacon_pnc_productrelease; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc product-release update" ];    then _picocli_bacon_pnc_productrelease; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc product-release --get" ];    then _picocli_bacon_pnc_productrelease; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc product-release list-support-levels" ];    then _picocli_bacon_pnc_productrelease; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc product-version create" ];    then _picocli_bacon_pnc_productversion; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc product-version get" ];    then _picocli_bacon_pnc_productversion; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc product-version update" ];    then _picocli_bacon_pnc_productversion; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc product-version list-build-configs" ];    then _picocli_bacon_pnc_productversion; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc product-version list-group-configs" ];    then _picocli_bacon_pnc_productversion; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc product-version list-milestones" ];    then _picocli_bacon_pnc_productversion; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc product-version list-releases" ];    then _picocli_bacon_pnc_productversion; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc project create" ];    then _picocli_bacon_pnc_project; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc project get" ];    then _picocli_bacon_pnc_project; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc project list" ];    then _picocli_bacon_pnc_project; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc project list-build-configs" ];    then _picocli_bacon_pnc_project; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc project list-builds" ];    then _picocli_bacon_pnc_project; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc project update" ];    then _picocli_bacon_pnc_project; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc scm-repository create-and-sync" ];    then _picocli_bacon_pnc_scmrepository; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc scm-repository get" ];    then _picocli_bacon_pnc_scmrepository; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc scm-repository list" ];    then _picocli_bacon_pnc_scmrepository; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc scm-repository update" ];    then _picocli_bacon_pnc_scmrepository; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} pnc scm-repository list-build-configs" ];    then _picocli_bacon_pnc_scmrepository; return $?; fi

  # Find the longest sequence of subcommands and call the bash function for that subcommand.
  local cmds0=(da)
  local cmds1=(pig)
  local cmds2=(pnc)
  local cmds3=(da blocklist)
  local cmds4=(da lookup)
  local cmds5=(da reports)
  local cmds6=(da blocklist list)
  local cmds7=(da blocklist add)
  local cmds8=(da lookup maven)
  local cmds9=(da lookup maven-versions)
  local cmds10=(da lookup maven-latest)
  local cmds11=(da lookup npm)
  local cmds12=(da lookup npm-versions)
  local cmds13=(da reports scm)
  local cmds14=(da reports scm-advanced)
  local cmds15=(da reports align)
  local cmds16=(da reports built)
  local cmds17=(da reports lookup-versions-npm)
  local cmds18=(pig cachi2lockfile)
  local cmds19=(pig configure)
  local cmds20=(pig cancel)
  local cmds21=(pig build)
  local cmds22=(pig run)
  local cmds23=(pig repo)
  local cmds24=(pig licenses)
  local cmds25=(pig javadocs)
  local cmds26=(pig sources)
  local cmds27=(pig shared-content)
  local cmds28=(pig docs)
  local cmds29=(pig release)
  local cmds30=(pig pre-process-yaml)
  local cmds31=(pig addons)
  local cmds32=(pig export)
  local cmds33=(pig export build-config)
  local cmds34=(pnc admin)
  local cmds35=(pnc artifact)
  local cmds36=(pnc brew-push)
  local cmds37=(pnc build)
  local cmds38=(pnc build-config)
  local cmds39=(pnc environment)
  local cmds40=(pnc deliverable-analysis)
  local cmds41=(pnc group-build)
  local cmds42=(pnc group-config)
  local cmds43=(pnc product)
  local cmds44=(pnc product-milestone)
  local cmds45=(pnc product-release)
  local cmds46=(pnc product-version)
  local cmds47=(pnc project)
  local cmds48=(pnc scm-repository)
  local cmds49=(pnc whoami)
  local cmds50=(pnc admin pnc-status)
  local cmds51=(pnc admin rex)
  local cmds52=(pnc admin pnc-status set)
  local cmds53=(pnc admin pnc-status get)
  local cmds54=(pnc admin rex clear-all)
  local cmds55=(pnc admin rex get)
  local cmds56=(pnc artifact get)
  local cmds57=(pnc artifact get-gav)
  local cmds58=(pnc artifact list-from-hash)
  local cmds59=(pnc artifact usage)
  local cmds60=(pnc artifact usage-gav)
  local cmds61=(pnc brew-push build)
  local cmds62=(pnc brew-push group-build)
  local cmds63=(pnc brew-push status)
  local cmds64=(pnc build start)
  local cmds65=(pnc build cancel)
  local cmds66=(pnc build list)
  local cmds67=(pnc build list-built-artifacts)
  local cmds68=(pnc build list-dependencies)
  local cmds69=(pnc build get)
  local cmds70=(pnc build get-revision)
  local cmds71=(pnc build get-log)
  local cmds72=(pnc build get-align-log)
  local cmds73=(pnc build download-sources)
  local cmds74=(pnc build-config create)
  local cmds75=(pnc build-config create-with-scm)
  local cmds76=(pnc build-config get)
  local cmds77=(pnc build-config get-revision)
  local cmds78=(pnc build-config list)
  local cmds79=(pnc build-config list-revisions)
  local cmds80=(pnc build-config list-builds)
  local cmds81=(pnc build-config update)
  local cmds82=(pnc build-config clone)
  local cmds83=(pnc build-config create-revision)
  local cmds84=(pnc build-config add-dependency)
  local cmds85=(pnc build-config remove-dependency)
  local cmds86=(pnc environment get)
  local cmds87=(pnc environment list)
  local cmds88=(pnc deliverable-analysis add-label)
  local cmds89=(pnc deliverable-analysis get)
  local cmds90=(pnc deliverable-analysis get-analyzed)
  local cmds91=(pnc deliverable-analysis get-label-history)
  local cmds92=(pnc deliverable-analysis list)
  local cmds93=(pnc deliverable-analysis remove-label)
  local cmds94=(pnc group-build start)
  local cmds95=(pnc group-build cancel)
  local cmds96=(pnc group-build list)
  local cmds97=(pnc group-build list-builds)
  local cmds98=(pnc group-build get)
  local cmds99=(pnc group-config create)
  local cmds100=(pnc group-config update)
  local cmds101=(pnc group-config list)
  local cmds102=(pnc group-config list-build-configs)
  local cmds103=(pnc group-config get)
  local cmds104=(pnc group-config add-build-config)
  local cmds105=(pnc group-config remove-build-config)
  local cmds106=(pnc group-config show-latest-build)
  local cmds107=(pnc product create)
  local cmds108=(pnc product get)
  local cmds109=(pnc product list)
  local cmds110=(pnc product list-versions)
  local cmds111=(pnc product update)
  local cmds112=(pnc product-milestone create)
  local cmds113=(pnc product-milestone update)
  local cmds114=(pnc product-milestone cancel-milestone-close)
  local cmds115=(pnc product-milestone get)
  local cmds116=(pnc product-milestone list-performed-builds)
  local cmds117=(pnc product-milestone close)
  local cmds118=(pnc product-milestone analyze-deliverables)
  local cmds119=(pnc product-milestone list-delivered-artifacts)
  local cmds120=(pnc product-milestone get-deliverables-analysis)
  local cmds121=(pnc product-release create)
  local cmds122=(pnc product-release update)
  local cmds123=(pnc product-release --get)
  local cmds124=(pnc product-release list-support-levels)
  local cmds125=(pnc product-version create)
  local cmds126=(pnc product-version get)
  local cmds127=(pnc product-version update)
  local cmds128=(pnc product-version list-build-configs)
  local cmds129=(pnc product-version list-group-configs)
  local cmds130=(pnc product-version list-milestones)
  local cmds131=(pnc product-version list-releases)
  local cmds132=(pnc project create)
  local cmds133=(pnc project get)
  local cmds134=(pnc project list)
  local cmds135=(pnc project list-build-configs)
  local cmds136=(pnc project list-builds)
  local cmds137=(pnc project update)
  local cmds138=(pnc scm-repository create-and-sync)
  local cmds139=(pnc scm-repository get)
  local cmds140=(pnc scm-repository list)
  local cmds141=(pnc scm-repository update)
  local cmds142=(pnc scm-repository list-build-configs)

  if CompWordsContainsArray "${cmds142[@]}"; then _picocli_bacon_pnc_scmrepository_listbuildconfigs; return $?; fi
  if CompWordsContainsArray "${cmds141[@]}"; then _picocli_bacon_pnc_scmrepository_update; return $?; fi
  if CompWordsContainsArray "${cmds140[@]}"; then _picocli_bacon_pnc_scmrepository_list; return $?; fi
  if CompWordsContainsArray "${cmds139[@]}"; then _picocli_bacon_pnc_scmrepository_get; return $?; fi
  if CompWordsContainsArray "${cmds138[@]}"; then _picocli_bacon_pnc_scmrepository_createandsync; return $?; fi
  if CompWordsContainsArray "${cmds137[@]}"; then _picocli_bacon_pnc_project_update; return $?; fi
  if CompWordsContainsArray "${cmds136[@]}"; then _picocli_bacon_pnc_project_listbuilds; return $?; fi
  if CompWordsContainsArray "${cmds135[@]}"; then _picocli_bacon_pnc_project_listbuildconfigs; return $?; fi
  if CompWordsContainsArray "${cmds134[@]}"; then _picocli_bacon_pnc_project_list; return $?; fi
  if CompWordsContainsArray "${cmds133[@]}"; then _picocli_bacon_pnc_project_get; return $?; fi
  if CompWordsContainsArray "${cmds132[@]}"; then _picocli_bacon_pnc_project_create; return $?; fi
  if CompWordsContainsArray "${cmds131[@]}"; then _picocli_bacon_pnc_productversion_listreleases; return $?; fi
  if CompWordsContainsArray "${cmds130[@]}"; then _picocli_bacon_pnc_productversion_listmilestones; return $?; fi
  if CompWordsContainsArray "${cmds129[@]}"; then _picocli_bacon_pnc_productversion_listgroupconfigs; return $?; fi
  if CompWordsContainsArray "${cmds128[@]}"; then _picocli_bacon_pnc_productversion_listbuildconfigs; return $?; fi
  if CompWordsContainsArray "${cmds127[@]}"; then _picocli_bacon_pnc_productversion_update; return $?; fi
  if CompWordsContainsArray "${cmds126[@]}"; then _picocli_bacon_pnc_productversion_get; return $?; fi
  if CompWordsContainsArray "${cmds125[@]}"; then _picocli_bacon_pnc_productversion_create; return $?; fi
  if CompWordsContainsArray "${cmds124[@]}"; then _picocli_bacon_pnc_productrelease_listsupportlevels; return $?; fi
  if CompWordsContainsArray "${cmds123[@]}"; then _picocli_bacon_pnc_productrelease_get; return $?; fi
  if CompWordsContainsArray "${cmds122[@]}"; then _picocli_bacon_pnc_productrelease_update; return $?; fi
  if CompWordsContainsArray "${cmds121[@]}"; then _picocli_bacon_pnc_productrelease_create; return $?; fi
  if CompWordsContainsArray "${cmds120[@]}"; then _picocli_bacon_pnc_productmilestone_getdeliverablesanalysis; return $?; fi
  if CompWordsContainsArray "${cmds119[@]}"; then _picocli_bacon_pnc_productmilestone_listdeliveredartifacts; return $?; fi
  if CompWordsContainsArray "${cmds118[@]}"; then _picocli_bacon_pnc_productmilestone_analyzedeliverables; return $?; fi
  if CompWordsContainsArray "${cmds117[@]}"; then _picocli_bacon_pnc_productmilestone_close; return $?; fi
  if CompWordsContainsArray "${cmds116[@]}"; then _picocli_bacon_pnc_productmilestone_listperformedbuilds; return $?; fi
  if CompWordsContainsArray "${cmds115[@]}"; then _picocli_bacon_pnc_productmilestone_get; return $?; fi
  if CompWordsContainsArray "${cmds114[@]}"; then _picocli_bacon_pnc_productmilestone_cancelmilestoneclose; return $?; fi
  if CompWordsContainsArray "${cmds113[@]}"; then _picocli_bacon_pnc_productmilestone_update; return $?; fi
  if CompWordsContainsArray "${cmds112[@]}"; then _picocli_bacon_pnc_productmilestone_create; return $?; fi
  if CompWordsContainsArray "${cmds111[@]}"; then _picocli_bacon_pnc_product_update; return $?; fi
  if CompWordsContainsArray "${cmds110[@]}"; then _picocli_bacon_pnc_product_listversions; return $?; fi
  if CompWordsContainsArray "${cmds109[@]}"; then _picocli_bacon_pnc_product_list; return $?; fi
  if CompWordsContainsArray "${cmds108[@]}"; then _picocli_bacon_pnc_product_get; return $?; fi
  if CompWordsContainsArray "${cmds107[@]}"; then _picocli_bacon_pnc_product_create; return $?; fi
  if CompWordsContainsArray "${cmds106[@]}"; then _picocli_bacon_pnc_groupconfig_showlatestbuild; return $?; fi
  if CompWordsContainsArray "${cmds105[@]}"; then _picocli_bacon_pnc_groupconfig_removebuildconfig; return $?; fi
  if CompWordsContainsArray "${cmds104[@]}"; then _picocli_bacon_pnc_groupconfig_addbuildconfig; return $?; fi
  if CompWordsContainsArray "${cmds103[@]}"; then _picocli_bacon_pnc_groupconfig_get; return $?; fi
  if CompWordsContainsArray "${cmds102[@]}"; then _picocli_bacon_pnc_groupconfig_listbuildconfigs; return $?; fi
  if CompWordsContainsArray "${cmds101[@]}"; then _picocli_bacon_pnc_groupconfig_list; return $?; fi
  if CompWordsContainsArray "${cmds100[@]}"; then _picocli_bacon_pnc_groupconfig_update; return $?; fi
  if CompWordsContainsArray "${cmds99[@]}"; then _picocli_bacon_pnc_groupconfig_create; return $?; fi
  if CompWordsContainsArray "${cmds98[@]}"; then _picocli_bacon_pnc_groupbuild_get; return $?; fi
  if CompWordsContainsArray "${cmds97[@]}"; then _picocli_bacon_pnc_groupbuild_listbuilds; return $?; fi
  if CompWordsContainsArray "${cmds96[@]}"; then _picocli_bacon_pnc_groupbuild_list; return $?; fi
  if CompWordsContainsArray "${cmds95[@]}"; then _picocli_bacon_pnc_groupbuild_cancel; return $?; fi
  if CompWordsContainsArray "${cmds94[@]}"; then _picocli_bacon_pnc_groupbuild_start; return $?; fi
  if CompWordsContainsArray "${cmds93[@]}"; then _picocli_bacon_pnc_deliverableanalysis_removelabel; return $?; fi
  if CompWordsContainsArray "${cmds92[@]}"; then _picocli_bacon_pnc_deliverableanalysis_list; return $?; fi
  if CompWordsContainsArray "${cmds91[@]}"; then _picocli_bacon_pnc_deliverableanalysis_getlabelhistory; return $?; fi
  if CompWordsContainsArray "${cmds90[@]}"; then _picocli_bacon_pnc_deliverableanalysis_getanalyzed; return $?; fi
  if CompWordsContainsArray "${cmds89[@]}"; then _picocli_bacon_pnc_deliverableanalysis_get; return $?; fi
  if CompWordsContainsArray "${cmds88[@]}"; then _picocli_bacon_pnc_deliverableanalysis_addlabel; return $?; fi
  if CompWordsContainsArray "${cmds87[@]}"; then _picocli_bacon_pnc_environment_list; return $?; fi
  if CompWordsContainsArray "${cmds86[@]}"; then _picocli_bacon_pnc_environment_get; return $?; fi
  if CompWordsContainsArray "${cmds85[@]}"; then _picocli_bacon_pnc_buildconfig_removedependency; return $?; fi
  if CompWordsContainsArray "${cmds84[@]}"; then _picocli_bacon_pnc_buildconfig_adddependency; return $?; fi
  if CompWordsContainsArray "${cmds83[@]}"; then _picocli_bacon_pnc_buildconfig_createrevision; return $?; fi
  if CompWordsContainsArray "${cmds82[@]}"; then _picocli_bacon_pnc_buildconfig_clone; return $?; fi
  if CompWordsContainsArray "${cmds81[@]}"; then _picocli_bacon_pnc_buildconfig_update; return $?; fi
  if CompWordsContainsArray "${cmds80[@]}"; then _picocli_bacon_pnc_buildconfig_listbuilds; return $?; fi
  if CompWordsContainsArray "${cmds79[@]}"; then _picocli_bacon_pnc_buildconfig_listrevisions; return $?; fi
  if CompWordsContainsArray "${cmds78[@]}"; then _picocli_bacon_pnc_buildconfig_list; return $?; fi
  if CompWordsContainsArray "${cmds77[@]}"; then _picocli_bacon_pnc_buildconfig_getrevision; return $?; fi
  if CompWordsContainsArray "${cmds76[@]}"; then _picocli_bacon_pnc_buildconfig_get; return $?; fi
  if CompWordsContainsArray "${cmds75[@]}"; then _picocli_bacon_pnc_buildconfig_createwithscm; return $?; fi
  if CompWordsContainsArray "${cmds74[@]}"; then _picocli_bacon_pnc_buildconfig_create; return $?; fi
  if CompWordsContainsArray "${cmds73[@]}"; then _picocli_bacon_pnc_build_downloadsources; return $?; fi
  if CompWordsContainsArray "${cmds72[@]}"; then _picocli_bacon_pnc_build_getalignlog; return $?; fi
  if CompWordsContainsArray "${cmds71[@]}"; then _picocli_bacon_pnc_build_getlog; return $?; fi
  if CompWordsContainsArray "${cmds70[@]}"; then _picocli_bacon_pnc_build_getrevision; return $?; fi
  if CompWordsContainsArray "${cmds69[@]}"; then _picocli_bacon_pnc_build_get; return $?; fi
  if CompWordsContainsArray "${cmds68[@]}"; then _picocli_bacon_pnc_build_listdependencies; return $?; fi
  if CompWordsContainsArray "${cmds67[@]}"; then _picocli_bacon_pnc_build_listbuiltartifacts; return $?; fi
  if CompWordsContainsArray "${cmds66[@]}"; then _picocli_bacon_pnc_build_list; return $?; fi
  if CompWordsContainsArray "${cmds65[@]}"; then _picocli_bacon_pnc_build_cancel; return $?; fi
  if CompWordsContainsArray "${cmds64[@]}"; then _picocli_bacon_pnc_build_start; return $?; fi
  if CompWordsContainsArray "${cmds63[@]}"; then _picocli_bacon_pnc_brewpush_status; return $?; fi
  if CompWordsContainsArray "${cmds62[@]}"; then _picocli_bacon_pnc_brewpush_groupbuild; return $?; fi
  if CompWordsContainsArray "${cmds61[@]}"; then _picocli_bacon_pnc_brewpush_build; return $?; fi
  if CompWordsContainsArray "${cmds60[@]}"; then _picocli_bacon_pnc_artifact_usagegav; return $?; fi
  if CompWordsContainsArray "${cmds59[@]}"; then _picocli_bacon_pnc_artifact_usage; return $?; fi
  if CompWordsContainsArray "${cmds58[@]}"; then _picocli_bacon_pnc_artifact_listfromhash; return $?; fi
  if CompWordsContainsArray "${cmds57[@]}"; then _picocli_bacon_pnc_artifact_getgav; return $?; fi
  if CompWordsContainsArray "${cmds56[@]}"; then _picocli_bacon_pnc_artifact_get; return $?; fi
  if CompWordsContainsArray "${cmds55[@]}"; then _picocli_bacon_pnc_admin_rex_get; return $?; fi
  if CompWordsContainsArray "${cmds54[@]}"; then _picocli_bacon_pnc_admin_rex_clearall; return $?; fi
  if CompWordsContainsArray "${cmds53[@]}"; then _picocli_bacon_pnc_admin_pncstatus_get; return $?; fi
  if CompWordsContainsArray "${cmds52[@]}"; then _picocli_bacon_pnc_admin_pncstatus_set; return $?; fi
  if CompWordsContainsArray "${cmds51[@]}"; then _picocli_bacon_pnc_admin_rex; return $?; fi
  if CompWordsContainsArray "${cmds50[@]}"; then _picocli_bacon_pnc_admin_pncstatus; return $?; fi
  if CompWordsContainsArray "${cmds49[@]}"; then _picocli_bacon_pnc_whoami; return $?; fi
  if CompWordsContainsArray "${cmds48[@]}"; then _picocli_bacon_pnc_scmrepository; return $?; fi
  if CompWordsContainsArray "${cmds47[@]}"; then _picocli_bacon_pnc_project; return $?; fi
  if CompWordsContainsArray "${cmds46[@]}"; then _picocli_bacon_pnc_productversion; return $?; fi
  if CompWordsContainsArray "${cmds45[@]}"; then _picocli_bacon_pnc_productrelease; return $?; fi
  if CompWordsContainsArray "${cmds44[@]}"; then _picocli_bacon_pnc_productmilestone; return $?; fi
  if CompWordsContainsArray "${cmds43[@]}"; then _picocli_bacon_pnc_product; return $?; fi
  if CompWordsContainsArray "${cmds42[@]}"; then _picocli_bacon_pnc_groupconfig; return $?; fi
  if CompWordsContainsArray "${cmds41[@]}"; then _picocli_bacon_pnc_groupbuild; return $?; fi
  if CompWordsContainsArray "${cmds40[@]}"; then _picocli_bacon_pnc_deliverableanalysis; return $?; fi
  if CompWordsContainsArray "${cmds39[@]}"; then _picocli_bacon_pnc_environment; return $?; fi
  if CompWordsContainsArray "${cmds38[@]}"; then _picocli_bacon_pnc_buildconfig; return $?; fi
  if CompWordsContainsArray "${cmds37[@]}"; then _picocli_bacon_pnc_build; return $?; fi
  if CompWordsContainsArray "${cmds36[@]}"; then _picocli_bacon_pnc_brewpush; return $?; fi
  if CompWordsContainsArray "${cmds35[@]}"; then _picocli_bacon_pnc_artifact; return $?; fi
  if CompWordsContainsArray "${cmds34[@]}"; then _picocli_bacon_pnc_admin; return $?; fi
  if CompWordsContainsArray "${cmds33[@]}"; then _picocli_bacon_pig_export_buildconfig; return $?; fi
  if CompWordsContainsArray "${cmds32[@]}"; then _picocli_bacon_pig_export; return $?; fi
  if CompWordsContainsArray "${cmds31[@]}"; then _picocli_bacon_pig_addons; return $?; fi
  if CompWordsContainsArray "${cmds30[@]}"; then _picocli_bacon_pig_preprocessyaml; return $?; fi
  if CompWordsContainsArray "${cmds29[@]}"; then _picocli_bacon_pig_release; return $?; fi
  if CompWordsContainsArray "${cmds28[@]}"; then _picocli_bacon_pig_docs; return $?; fi
  if CompWordsContainsArray "${cmds27[@]}"; then _picocli_bacon_pig_sharedcontent; return $?; fi
  if CompWordsContainsArray "${cmds26[@]}"; then _picocli_bacon_pig_sources; return $?; fi
  if CompWordsContainsArray "${cmds25[@]}"; then _picocli_bacon_pig_javadocs; return $?; fi
  if CompWordsContainsArray "${cmds24[@]}"; then _picocli_bacon_pig_licenses; return $?; fi
  if CompWordsContainsArray "${cmds23[@]}"; then _picocli_bacon_pig_repo; return $?; fi
  if CompWordsContainsArray "${cmds22[@]}"; then _picocli_bacon_pig_run; return $?; fi
  if CompWordsContainsArray "${cmds21[@]}"; then _picocli_bacon_pig_build; return $?; fi
  if CompWordsContainsArray "${cmds20[@]}"; then _picocli_bacon_pig_cancel; return $?; fi
  if CompWordsContainsArray "${cmds19[@]}"; then _picocli_bacon_pig_configure; return $?; fi
  if CompWordsContainsArray "${cmds18[@]}"; then _picocli_bacon_pig_cachi2lockfile; return $?; fi
  if CompWordsContainsArray "${cmds17[@]}"; then _picocli_bacon_da_reports_lookupversionsnpm; return $?; fi
  if CompWordsContainsArray "${cmds16[@]}"; then _picocli_bacon_da_reports_built; return $?; fi
  if CompWordsContainsArray "${cmds15[@]}"; then _picocli_bacon_da_reports_align; return $?; fi
  if CompWordsContainsArray "${cmds14[@]}"; then _picocli_bacon_da_reports_scmadvanced; return $?; fi
  if CompWordsContainsArray "${cmds13[@]}"; then _picocli_bacon_da_reports_scm; return $?; fi
  if CompWordsContainsArray "${cmds12[@]}"; then _picocli_bacon_da_lookup_npmversions; return $?; fi
  if CompWordsContainsArray "${cmds11[@]}"; then _picocli_bacon_da_lookup_npm; return $?; fi
  if CompWordsContainsArray "${cmds10[@]}"; then _picocli_bacon_da_lookup_mavenlatest; return $?; fi
  if CompWordsContainsArray "${cmds9[@]}"; then _picocli_bacon_da_lookup_mavenversions; return $?; fi
  if CompWordsContainsArray "${cmds8[@]}"; then _picocli_bacon_da_lookup_maven; return $?; fi
  if CompWordsContainsArray "${cmds7[@]}"; then _picocli_bacon_da_blocklist_add; return $?; fi
  if CompWordsContainsArray "${cmds6[@]}"; then _picocli_bacon_da_blocklist_list; return $?; fi
  if CompWordsContainsArray "${cmds5[@]}"; then _picocli_bacon_da_reports; return $?; fi
  if CompWordsContainsArray "${cmds4[@]}"; then _picocli_bacon_da_lookup; return $?; fi
  if CompWordsContainsArray "${cmds3[@]}"; then _picocli_bacon_da_blocklist; return $?; fi
  if CompWordsContainsArray "${cmds2[@]}"; then _picocli_bacon_pnc; return $?; fi
  if CompWordsContainsArray "${cmds1[@]}"; then _picocli_bacon_pig; return $?; fi
  if CompWordsContainsArray "${cmds0[@]}"; then _picocli_bacon_da; return $?; fi

  # No subcommands were specified; generate completions for the top-level command.
  _picocli_bacon; return $?;
}

# Generates completions for the options and subcommands of the `bacon` command.
function _picocli_bacon() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="da pig pnc"
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `da` subcommand.
function _picocli_bacon_da() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="blocklist lookup reports"
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `pig` subcommand.
function _picocli_bacon_pig() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="cachi2lockfile configure cancel build run repo licenses javadocs sources shared-content docs release pre-process-yaml addons export"
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `pnc` subcommand.
function _picocli_bacon_pnc() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="admin artifact brew-push build build-config environment deliverable-analysis group-build group-config product product-milestone product-release product-version project scm-repository whoami"
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `blocklist` subcommand.
function _picocli_bacon_da_blocklist() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="list add"
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `lookup` subcommand.
function _picocli_bacon_da_lookup() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="maven maven-versions maven-latest npm npm-versions"
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `reports` subcommand.
function _picocli_bacon_da_reports() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="scm scm-advanced align built lookup-versions-npm"
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_bacon_da_blocklist_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `add` subcommand.
function _picocli_bacon_da_blocklist_add() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `maven` subcommand.
function _picocli_bacon_da_lookup_maven() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'--brew-pull-active' '-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--lookup-mode' '-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--lookup-mode')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `maven-versions` subcommand.
function _picocli_bacon_da_lookup_mavenversions() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'--include-bad' '--brew-pull-active' '-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--filter' '--distance-rule' '--lookup-mode' '-p' '--configPath' '--profile'"
  local filter_option_args=("ALL" "MAJOR" "MAJOR_MINOR" "MAJOR_MINOR_MICRO" "MAJOR_MINOR_MICRO_QUALIFIER") # --filter values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--filter')
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${filter_option_args[@]}" ) )
      return $?
      ;;
    '--distance-rule')
      return
      ;;
    '--lookup-mode')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `maven-latest` subcommand.
function _picocli_bacon_da_lookup_mavenlatest() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--lookup-mode' '--filename' '-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--lookup-mode')
      return
      ;;
    '--filename')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `npm` subcommand.
function _picocli_bacon_da_lookup_npm() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'--brew-pull-active' '-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--lookup-mode' '-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--lookup-mode')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `npm-versions` subcommand.
function _picocli_bacon_da_lookup_npmversions() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'--include-bad' '-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--filter' '--distance-rule' '--lookup-mode' '-p' '--configPath' '--profile'"
  local filter_option_args=("ALL" "MAJOR" "MAJOR_MINOR" "MAJOR_MINOR_MICRO" "MAJOR_MINOR_MICRO_QUALIFIER") # --filter values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--filter')
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${filter_option_args[@]}" ) )
      return $?
      ;;
    '--distance-rule')
      return
      ;;
    '--lookup-mode')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `scm` subcommand.
function _picocli_bacon_da_reports_scm() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--repositories' '-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--repositories')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `scm-advanced` subcommand.
function _picocli_bacon_da_reports_scmadvanced() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--repositories' '-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--repositories')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `align` subcommand.
function _picocli_bacon_da_reports_align() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--repositories' '-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--repositories')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `built` subcommand.
function _picocli_bacon_da_reports_built() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--repositories' '-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--repositories')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `lookup-versions-npm` subcommand.
function _picocli_bacon_da_reports_lookupversionsnpm() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'--includeAll' '-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--mode' '-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--mode')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `cachi2lockfile` subcommand.
function _picocli_bacon_pig_cachi2lockfile() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--output' '--maven-repository-url' '--preferred-checksum-alg' '-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--output')
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    '--maven-repository-url')
      return
      ;;
    '--preferred-checksum-alg')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local currIndex
    currIndex=$(currentPositionalIndex "cachi2lockfile" "${arg_opts}" "${flag_opts}")
    if (( currIndex >= 0 && currIndex <= 2147483647 )); then
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      positionals=$( compgen -f -- "${curr_word}" ) # files
    fi
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `configure` subcommand.
function _picocli_bacon_pig_configure() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-t' '--tempBuild' '--clean' '--artifactCacheDownload' '--useLocalM2Cache' '--skipBranchCheck' '-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--tempBuildAlignment' '--releaseStorageUrl' '--downloadAttempts' '--targetPath' '-e' '--env' '-p' '--configPath' '--profile'"
  local tempAlign_option_args=("TEMPORARY" "PERSISTENT") # --tempBuildAlignment values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--tempBuildAlignment')
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${tempAlign_option_args[@]}" ) )
      return $?
      ;;
    '--releaseStorageUrl')
      return
      ;;
    '--downloadAttempts')
      return
      ;;
    '--targetPath')
      return
      ;;
    '-e'|'--env')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `cancel` subcommand.
function _picocli_bacon_pig_cancel() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-t' '--tempBuild' '--clean' '--artifactCacheDownload' '--useLocalM2Cache' '-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--tempBuildAlignment' '--releaseStorageUrl' '--downloadAttempts' '--targetPath' '-e' '--env' '-p' '--configPath' '--profile'"
  local tempAlign_option_args=("TEMPORARY" "PERSISTENT") # --tempBuildAlignment values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--tempBuildAlignment')
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${tempAlign_option_args[@]}" ) )
      return $?
      ;;
    '--releaseStorageUrl')
      return
      ;;
    '--downloadAttempts')
      return
      ;;
    '--targetPath')
      return
      ;;
    '-e'|'--env')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `build` subcommand.
function _picocli_bacon_pig_build() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-t' '--tempBuild' '--clean' '--artifactCacheDownload' '--useLocalM2Cache' '--tempBuildTimeStamp' '--noWait' '-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--tempBuildAlignment' '--releaseStorageUrl' '--downloadAttempts' '--targetPath' '-e' '--env' '--mode' '-p' '--configPath' '--profile'"
  local tempAlign_option_args=("TEMPORARY" "PERSISTENT") # --tempBuildAlignment values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--tempBuildAlignment')
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${tempAlign_option_args[@]}" ) )
      return $?
      ;;
    '--releaseStorageUrl')
      return
      ;;
    '--downloadAttempts')
      return
      ;;
    '--targetPath')
      return
      ;;
    '-e'|'--env')
      return
      ;;
    '--mode')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `run` subcommand.
function _picocli_bacon_pig_run() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-t' '--tempBuild' '--clean' '--artifactCacheDownload' '--useLocalM2Cache' '--tempBuildTimeStamp' '--skipPncUpdate' '--skipBuilds' '--skipSources' '--skipJavadoc' '--skipLicenses' '--skipSharedContent' '--removeGeneratedM2Dups' '--skipBranchCheck' '--strictLicenseCheck' '--strictDownloadSource' '--oldBCNaming' '-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--tempBuildAlignment' '--releaseStorageUrl' '--downloadAttempts' '--targetPath' '-e' '--env' '--mode' '-r' '--repoZip' '--licenseExceptionsPath' '--licenseNamesPath' '--skipAddon' '-p' '--configPath' '--profile'"
  local tempAlign_option_args=("TEMPORARY" "PERSISTENT") # --tempBuildAlignment values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--tempBuildAlignment')
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${tempAlign_option_args[@]}" ) )
      return $?
      ;;
    '--releaseStorageUrl')
      return
      ;;
    '--downloadAttempts')
      return
      ;;
    '--targetPath')
      return
      ;;
    '-e'|'--env')
      return
      ;;
    '--mode')
      return
      ;;
    '-r'|'--repoZip')
      return
      ;;
    '--licenseExceptionsPath')
      return
      ;;
    '--licenseNamesPath')
      return
      ;;
    '--skipAddon')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `repo` subcommand.
function _picocli_bacon_pig_repo() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-t' '--tempBuild' '--clean' '--artifactCacheDownload' '--useLocalM2Cache' '--removeGeneratedM2Dups' '--strictLicenseCheck' '--strictDownloadSource' '-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--tempBuildAlignment' '--releaseStorageUrl' '--downloadAttempts' '--targetPath' '-e' '--env' '-p' '--configPath' '--profile'"
  local tempAlign_option_args=("TEMPORARY" "PERSISTENT") # --tempBuildAlignment values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--tempBuildAlignment')
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${tempAlign_option_args[@]}" ) )
      return $?
      ;;
    '--releaseStorageUrl')
      return
      ;;
    '--downloadAttempts')
      return
      ;;
    '--targetPath')
      return
      ;;
    '-e'|'--env')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `licenses` subcommand.
function _picocli_bacon_pig_licenses() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-t' '--tempBuild' '--clean' '--artifactCacheDownload' '--useLocalM2Cache' '--strictLicenseCheck' '-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--tempBuildAlignment' '--releaseStorageUrl' '--downloadAttempts' '--targetPath' '-e' '--env' '--licenseExceptionsPath' '--licenseNamesPath' '-p' '--configPath' '--profile'"
  local tempAlign_option_args=("TEMPORARY" "PERSISTENT") # --tempBuildAlignment values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--tempBuildAlignment')
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${tempAlign_option_args[@]}" ) )
      return $?
      ;;
    '--releaseStorageUrl')
      return
      ;;
    '--downloadAttempts')
      return
      ;;
    '--targetPath')
      return
      ;;
    '-e'|'--env')
      return
      ;;
    '--licenseExceptionsPath')
      return
      ;;
    '--licenseNamesPath')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `javadocs` subcommand.
function _picocli_bacon_pig_javadocs() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-t' '--tempBuild' '--clean' '--artifactCacheDownload' '--useLocalM2Cache' '-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--tempBuildAlignment' '--releaseStorageUrl' '--downloadAttempts' '--targetPath' '-e' '--env' '-p' '--configPath' '--profile'"
  local tempAlign_option_args=("TEMPORARY" "PERSISTENT") # --tempBuildAlignment values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--tempBuildAlignment')
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${tempAlign_option_args[@]}" ) )
      return $?
      ;;
    '--releaseStorageUrl')
      return
      ;;
    '--downloadAttempts')
      return
      ;;
    '--targetPath')
      return
      ;;
    '-e'|'--env')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `sources` subcommand.
function _picocli_bacon_pig_sources() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-t' '--tempBuild' '--clean' '--artifactCacheDownload' '--useLocalM2Cache' '--oldBCNaming' '-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--tempBuildAlignment' '--releaseStorageUrl' '--downloadAttempts' '--targetPath' '-e' '--env' '-p' '--configPath' '--profile'"
  local tempAlign_option_args=("TEMPORARY" "PERSISTENT") # --tempBuildAlignment values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--tempBuildAlignment')
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${tempAlign_option_args[@]}" ) )
      return $?
      ;;
    '--releaseStorageUrl')
      return
      ;;
    '--downloadAttempts')
      return
      ;;
    '--targetPath')
      return
      ;;
    '-e'|'--env')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `shared-content` subcommand.
function _picocli_bacon_pig_sharedcontent() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-t' '--tempBuild' '--clean' '--artifactCacheDownload' '--useLocalM2Cache' '-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--tempBuildAlignment' '--releaseStorageUrl' '--downloadAttempts' '--targetPath' '-e' '--env' '-p' '--configPath' '--profile'"
  local tempAlign_option_args=("TEMPORARY" "PERSISTENT") # --tempBuildAlignment values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--tempBuildAlignment')
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${tempAlign_option_args[@]}" ) )
      return $?
      ;;
    '--releaseStorageUrl')
      return
      ;;
    '--downloadAttempts')
      return
      ;;
    '--targetPath')
      return
      ;;
    '-e'|'--env')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `docs` subcommand.
function _picocli_bacon_pig_docs() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-t' '--tempBuild' '--clean' '--artifactCacheDownload' '--useLocalM2Cache' '-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--tempBuildAlignment' '--releaseStorageUrl' '--downloadAttempts' '--targetPath' '-e' '--env' '-p' '--configPath' '--profile'"
  local tempAlign_option_args=("TEMPORARY" "PERSISTENT") # --tempBuildAlignment values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--tempBuildAlignment')
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${tempAlign_option_args[@]}" ) )
      return $?
      ;;
    '--releaseStorageUrl')
      return
      ;;
    '--downloadAttempts')
      return
      ;;
    '--targetPath')
      return
      ;;
    '-e'|'--env')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `release` subcommand.
function _picocli_bacon_pig_release() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-t' '--tempBuild' '--clean' '--artifactCacheDownload' '--useLocalM2Cache' '-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--tempBuildAlignment' '--releaseStorageUrl' '--downloadAttempts' '--targetPath' '-e' '--env' '-p' '--configPath' '--profile'"
  local tempAlign_option_args=("TEMPORARY" "PERSISTENT") # --tempBuildAlignment values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--tempBuildAlignment')
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${tempAlign_option_args[@]}" ) )
      return $?
      ;;
    '--releaseStorageUrl')
      return
      ;;
    '--downloadAttempts')
      return
      ;;
    '--targetPath')
      return
      ;;
    '-e'|'--env')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `pre-process-yaml` subcommand.
function _picocli_bacon_pig_preprocessyaml() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-t' '--tempBuild' '--clean' '--artifactCacheDownload' '--useLocalM2Cache' '-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--tempBuildAlignment' '--releaseStorageUrl' '--downloadAttempts' '--targetPath' '-e' '--env' '-p' '--configPath' '--profile'"
  local tempAlign_option_args=("TEMPORARY" "PERSISTENT") # --tempBuildAlignment values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--tempBuildAlignment')
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${tempAlign_option_args[@]}" ) )
      return $?
      ;;
    '--releaseStorageUrl')
      return
      ;;
    '--downloadAttempts')
      return
      ;;
    '--targetPath')
      return
      ;;
    '-e'|'--env')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `addons` subcommand.
function _picocli_bacon_pig_addons() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-t' '--tempBuild' '--clean' '--artifactCacheDownload' '--useLocalM2Cache' '-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--tempBuildAlignment' '--releaseStorageUrl' '--downloadAttempts' '--targetPath' '-e' '--env' '--skipAddon' '-p' '--configPath' '--profile'"
  local tempAlign_option_args=("TEMPORARY" "PERSISTENT") # --tempBuildAlignment values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--tempBuildAlignment')
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${tempAlign_option_args[@]}" ) )
      return $?
      ;;
    '--releaseStorageUrl')
      return
      ;;
    '--downloadAttempts')
      return
      ;;
    '--targetPath')
      return
      ;;
    '-e'|'--env')
      return
      ;;
    '--skipAddon')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `export` subcommand.
function _picocli_bacon_pig_export() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="build-config"
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `build-config` subcommand.
function _picocli_bacon_pig_export_buildconfig() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'--environment-by-name' '-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--revision' '--rename' '-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--revision')
      return
      ;;
    '--rename')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `admin` subcommand.
function _picocli_bacon_pnc_admin() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="pnc-status rex"
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `artifact` subcommand.
function _picocli_bacon_pnc_artifact() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="get get-gav list-from-hash usage usage-gav"
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `brew-push` subcommand.
function _picocli_bacon_pnc_brewpush() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="build group-build status"
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `build` subcommand.
function _picocli_bacon_pnc_build() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="start cancel list list-built-artifacts list-dependencies get get-revision get-log get-align-log download-sources"
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `build-config` subcommand.
function _picocli_bacon_pnc_buildconfig() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="create create-with-scm get get-revision list list-revisions list-builds update clone create-revision add-dependency remove-dependency"
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `environment` subcommand.
function _picocli_bacon_pnc_environment() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="get list"
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `deliverable-analysis` subcommand.
function _picocli_bacon_pnc_deliverableanalysis() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="add-label get get-analyzed get-label-history list remove-label"
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `group-build` subcommand.
function _picocli_bacon_pnc_groupbuild() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="start cancel list list-builds get"
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `group-config` subcommand.
function _picocli_bacon_pnc_groupconfig() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="create update list list-build-configs get add-build-config remove-build-config show-latest-build"
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `product` subcommand.
function _picocli_bacon_pnc_product() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="create get list list-versions update"
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `product-milestone` subcommand.
function _picocli_bacon_pnc_productmilestone() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="create update cancel-milestone-close get list-performed-builds close analyze-deliverables list-delivered-artifacts get-deliverables-analysis"
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `product-release` subcommand.
function _picocli_bacon_pnc_productrelease() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="create update --get list-support-levels"
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `product-version` subcommand.
function _picocli_bacon_pnc_productversion() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="create get update list-build-configs list-group-configs list-milestones list-releases"
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `project` subcommand.
function _picocli_bacon_pnc_project() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="create get list list-build-configs list-builds update"
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `scm-repository` subcommand.
function _picocli_bacon_pnc_scmrepository() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="create-and-sync get list update list-build-configs"
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `whoami` subcommand.
function _picocli_bacon_pnc_whoami() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `pnc-status` subcommand.
function _picocli_bacon_pnc_admin_pncstatus() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="set get"
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `rex` subcommand.
function _picocli_bacon_pnc_admin_rex() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="clear-all get"
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `set` subcommand.
function _picocli_bacon_pnc_admin_pncstatus_set() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--banner' '--eta' '-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--banner')
      return
      ;;
    '--eta')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_bacon_pnc_admin_pncstatus_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `clear-all` subcommand.
function _picocli_bacon_pnc_admin_rex_clearall() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_bacon_pnc_admin_rex_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_bacon_pnc_artifact_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get-gav` subcommand.
function _picocli_bacon_pnc_artifact_getgav() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list-from-hash` subcommand.
function _picocli_bacon_pnc_artifact_listfromhash() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--md5' '--sha1' '--sha256' '-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--md5')
      return
      ;;
    '--sha1')
      return
      ;;
    '--sha256')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `usage` subcommand.
function _picocli_bacon_pnc_artifact_usage() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--sort' '--query' '-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--sort')
      return
      ;;
    '--query')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `usage-gav` subcommand.
function _picocli_bacon_pnc_artifact_usagegav() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--sort' '--query' '-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--sort')
      return
      ;;
    '--query')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `build` subcommand.
function _picocli_bacon_pnc_brewpush_build() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'--reimport' '--wait' '-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--tag-prefix' '--timeout' '-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--tag-prefix')
      return
      ;;
    '--timeout')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `group-build` subcommand.
function _picocli_bacon_pnc_brewpush_groupbuild() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--tag-prefix' '-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--tag-prefix')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `status` subcommand.
function _picocli_bacon_pnc_brewpush_status() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `start` subcommand.
function _picocli_bacon_pnc_build_start() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'--keep-pod-on-failure' '--timestamp-alignment' '--temporary-build' '--wait' '--no-build-dependencies' '--dry-run' '-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--rebuild-mode' '--timeout' '--revision' '-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--rebuild-mode')
      return
      ;;
    '--timeout')
      return
      ;;
    '--revision')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `cancel` subcommand.
function _picocli_bacon_pnc_build_cancel() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_bacon_pnc_build_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'--latest' '--running-only' '-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--sort' '--query' '--attributes' '-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--sort')
      return
      ;;
    '--query')
      return
      ;;
    '--attributes')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list-built-artifacts` subcommand.
function _picocli_bacon_pnc_build_listbuiltartifacts() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--sort' '--query' '-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--sort')
      return
      ;;
    '--query')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list-dependencies` subcommand.
function _picocli_bacon_pnc_build_listdependencies() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--sort' '--query' '-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--sort')
      return
      ;;
    '--query')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_bacon_pnc_build_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get-revision` subcommand.
function _picocli_bacon_pnc_build_getrevision() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get-log` subcommand.
function _picocli_bacon_pnc_build_getlog() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'--follow' '-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get-align-log` subcommand.
function _picocli_bacon_pnc_build_getalignlog() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `download-sources` subcommand.
function _picocli_bacon_pnc_build_downloadsources() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `create` subcommand.
function _picocli_bacon_pnc_buildconfig_create() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'--brew-pull-active' '-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--description' '--environment-id' '--project-id' '--build-script' '--scm-repository-id' '--scm-revision' '-P' '--parameter' '--product-version-id' '--build-type' '-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--description')
      return
      ;;
    '--environment-id')
      return
      ;;
    '--project-id')
      return
      ;;
    '--build-script')
      return
      ;;
    '--scm-repository-id')
      return
      ;;
    '--scm-revision')
      return
      ;;
    '-P'|'--parameter')
      return
      ;;
    '--product-version-id')
      return
      ;;
    '--build-type')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `create-with-scm` subcommand.
function _picocli_bacon_pnc_buildconfig_createwithscm() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'--no-pre-build-sync' '--brew-pull-active' '-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--description' '--environment-id' '--project-id' '--build-script' '-P' '--parameter' '--product-version-id' '--build-type' '--scm-url' '--scm-revision' '-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--description')
      return
      ;;
    '--environment-id')
      return
      ;;
    '--project-id')
      return
      ;;
    '--build-script')
      return
      ;;
    '-P'|'--parameter')
      return
      ;;
    '--product-version-id')
      return
      ;;
    '--build-type')
      return
      ;;
    '--scm-url')
      return
      ;;
    '--scm-revision')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_bacon_pnc_buildconfig_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get-revision` subcommand.
function _picocli_bacon_pnc_buildconfig_getrevision() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--revisionId' '-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--revisionId')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_bacon_pnc_buildconfig_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--sort' '--query' '-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--sort')
      return
      ;;
    '--query')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list-revisions` subcommand.
function _picocli_bacon_pnc_buildconfig_listrevisions() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--sort' '--query' '-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--sort')
      return
      ;;
    '--query')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list-builds` subcommand.
function _picocli_bacon_pnc_buildconfig_listbuilds() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'--latest' '--running-only' '-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--sort' '--query' '-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--sort')
      return
      ;;
    '--query')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `update` subcommand.
function _picocli_bacon_pnc_buildconfig_update() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'--brew-pull-active' '-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--buildConfigName' '--description' '--environment-id' '--build-script' '--scm-repository-id' '--scm-revision' '-P' '--parameter' '--remove-parameters' '--build-type' '--product-version-id' '-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--buildConfigName')
      return
      ;;
    '--description')
      return
      ;;
    '--environment-id')
      return
      ;;
    '--build-script')
      return
      ;;
    '--scm-repository-id')
      return
      ;;
    '--scm-revision')
      return
      ;;
    '-P'|'--parameter')
      return
      ;;
    '--remove-parameters')
      return
      ;;
    '--build-type')
      return
      ;;
    '--product-version-id')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `clone` subcommand.
function _picocli_bacon_pnc_buildconfig_clone() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--buildConfigName' '--scmRevision' '-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--buildConfigName')
      return
      ;;
    '--scmRevision')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `create-revision` subcommand.
function _picocli_bacon_pnc_buildconfig_createrevision() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'--brew-pull-active' '-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--buildConfigName' '--description' '--environment-id' '--build-script' '--scm-repository-id' '--scm-revision' '-P' '--parameter' '--remove-parameters' '--build-type' '--product-version-id' '-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--buildConfigName')
      return
      ;;
    '--description')
      return
      ;;
    '--environment-id')
      return
      ;;
    '--build-script')
      return
      ;;
    '--scm-repository-id')
      return
      ;;
    '--scm-revision')
      return
      ;;
    '-P'|'--parameter')
      return
      ;;
    '--remove-parameters')
      return
      ;;
    '--build-type')
      return
      ;;
    '--product-version-id')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `add-dependency` subcommand.
function _picocli_bacon_pnc_buildconfig_adddependency() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--dependency-id' '-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--dependency-id')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `remove-dependency` subcommand.
function _picocli_bacon_pnc_buildconfig_removedependency() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--dependency-id' '-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--dependency-id')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_bacon_pnc_environment_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_bacon_pnc_environment_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--sort' '--query' '-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--sort')
      return
      ;;
    '--query')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `add-label` subcommand.
function _picocli_bacon_pnc_deliverableanalysis_addlabel() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--reason' '-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--reason')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac
  local label_pos_param_args=("DELETED" "SCRATCH" "RELEASED") # 1-1 values

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local currIndex
    currIndex=$(currentPositionalIndex "add-label" "${arg_opts}" "${flag_opts}")
    if (( currIndex >= 1 && currIndex <= 1 )); then
      positionals=$( compReplyArray "${label_pos_param_args[@]}" )
    fi
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_bacon_pnc_deliverableanalysis_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get-analyzed` subcommand.
function _picocli_bacon_pnc_deliverableanalysis_getanalyzed() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--sort' '--query' '-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--sort')
      return
      ;;
    '--query')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get-label-history` subcommand.
function _picocli_bacon_pnc_deliverableanalysis_getlabelhistory() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--sort' '--query' '-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--sort')
      return
      ;;
    '--query')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_bacon_pnc_deliverableanalysis_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--sort' '--query' '-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--sort')
      return
      ;;
    '--query')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `remove-label` subcommand.
function _picocli_bacon_pnc_deliverableanalysis_removelabel() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--reason' '-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--reason')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac
  local label_pos_param_args=("DELETED" "SCRATCH" "RELEASED") # 1-1 values

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local currIndex
    currIndex=$(currentPositionalIndex "remove-label" "${arg_opts}" "${flag_opts}")
    if (( currIndex >= 1 && currIndex <= 1 )); then
      positionals=$( compReplyArray "${label_pos_param_args[@]}" )
    fi
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `start` subcommand.
function _picocli_bacon_pnc_groupbuild_start() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'--timestamp-alignment' '--temporary-build' '--wait' '--dry-run' '-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--rebuild-mode' '--timeout' '-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--rebuild-mode')
      return
      ;;
    '--timeout')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `cancel` subcommand.
function _picocli_bacon_pnc_groupbuild_cancel() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_bacon_pnc_groupbuild_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--sort' '--query' '-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--sort')
      return
      ;;
    '--query')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list-builds` subcommand.
function _picocli_bacon_pnc_groupbuild_listbuilds() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'--latest' '--running-only' '-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--sort' '--query' '-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--sort')
      return
      ;;
    '--query')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_bacon_pnc_groupbuild_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `create` subcommand.
function _picocli_bacon_pnc_groupconfig_create() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--product-version-id' '--build-config-ids' '-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--product-version-id')
      return
      ;;
    '--build-config-ids')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `update` subcommand.
function _picocli_bacon_pnc_groupconfig_update() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--name' '--product-version-id' '--build-config-ids' '-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--name')
      return
      ;;
    '--product-version-id')
      return
      ;;
    '--build-config-ids')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_bacon_pnc_groupconfig_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--sort' '--query' '-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--sort')
      return
      ;;
    '--query')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list-build-configs` subcommand.
function _picocli_bacon_pnc_groupconfig_listbuildconfigs() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--sort' '--query' '-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--sort')
      return
      ;;
    '--query')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_bacon_pnc_groupconfig_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `add-build-config` subcommand.
function _picocli_bacon_pnc_groupconfig_addbuildconfig() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--bc-id' '-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--bc-id')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `remove-build-config` subcommand.
function _picocli_bacon_pnc_groupconfig_removebuildconfig() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--bc-id' '-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--bc-id')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `show-latest-build` subcommand.
function _picocli_bacon_pnc_groupconfig_showlatestbuild() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'--temporary-build' '-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `create` subcommand.
function _picocli_bacon_pnc_product_create() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--abbreviation' '--description' '-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--abbreviation')
      return
      ;;
    '--description')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_bacon_pnc_product_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_bacon_pnc_product_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--sort' '--query' '-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--sort')
      return
      ;;
    '--query')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list-versions` subcommand.
function _picocli_bacon_pnc_product_listversions() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--sort' '--query' '-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--sort')
      return
      ;;
    '--query')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `update` subcommand.
function _picocli_bacon_pnc_product_update() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--name' '--abbreviation' '--description' '-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--name')
      return
      ;;
    '--abbreviation')
      return
      ;;
    '--description')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `create` subcommand.
function _picocli_bacon_pnc_productmilestone_create() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'--set-current' '-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--product-version-id' '--starting-date' '--end-date' '-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--product-version-id')
      return
      ;;
    '--starting-date')
      return
      ;;
    '--end-date')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `update` subcommand.
function _picocli_bacon_pnc_productmilestone_update() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'--set-current' '-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--product-milestone-version' '--starting-date' '--end-date' '-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--product-milestone-version')
      return
      ;;
    '--starting-date')
      return
      ;;
    '--end-date')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `cancel-milestone-close` subcommand.
function _picocli_bacon_pnc_productmilestone_cancelmilestoneclose() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_bacon_pnc_productmilestone_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list-performed-builds` subcommand.
function _picocli_bacon_pnc_productmilestone_listperformedbuilds() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'--latest' '--running-only' '-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--sort' '--query' '-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--sort')
      return
      ;;
    '--query')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `close` subcommand.
function _picocli_bacon_pnc_productmilestone_close() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'--skipBrewPush' '-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `analyze-deliverables` subcommand.
function _picocli_bacon_pnc_productmilestone_analyzedeliverables() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'--scratch' '-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--deliverables-link' '-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--deliverables-link')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list-delivered-artifacts` subcommand.
function _picocli_bacon_pnc_productmilestone_listdeliveredartifacts() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--sort' '--query' '-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--sort')
      return
      ;;
    '--query')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get-deliverables-analysis` subcommand.
function _picocli_bacon_pnc_productmilestone_getdeliverablesanalysis() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `create` subcommand.
function _picocli_bacon_pnc_productrelease_create() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--release-date' '--milestone-id' '--support-level' '-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--release-date')
      return
      ;;
    '--milestone-id')
      return
      ;;
    '--support-level')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `update` subcommand.
function _picocli_bacon_pnc_productrelease_update() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--product-release-version' '--release-date' '--support-level' '-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--product-release-version')
      return
      ;;
    '--release-date')
      return
      ;;
    '--support-level')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `--get` subcommand.
function _picocli_bacon_pnc_productrelease_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list-support-levels` subcommand.
function _picocli_bacon_pnc_productrelease_listsupportlevels() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `create` subcommand.
function _picocli_bacon_pnc_productversion_create() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--product-id' '-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--product-id')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_bacon_pnc_productversion_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `update` subcommand.
function _picocli_bacon_pnc_productversion_update() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--product-version' '-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--product-version')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list-build-configs` subcommand.
function _picocli_bacon_pnc_productversion_listbuildconfigs() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--sort' '--query' '-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--sort')
      return
      ;;
    '--query')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list-group-configs` subcommand.
function _picocli_bacon_pnc_productversion_listgroupconfigs() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--sort' '--query' '-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--sort')
      return
      ;;
    '--query')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list-milestones` subcommand.
function _picocli_bacon_pnc_productversion_listmilestones() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--sort' '--query' '-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--sort')
      return
      ;;
    '--query')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list-releases` subcommand.
function _picocli_bacon_pnc_productversion_listreleases() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--sort' '--query' '-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--sort')
      return
      ;;
    '--query')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `create` subcommand.
function _picocli_bacon_pnc_project_create() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--description' '--project-url' '--issue-tracker-url' '-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--description')
      return
      ;;
    '--project-url')
      return
      ;;
    '--issue-tracker-url')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_bacon_pnc_project_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_bacon_pnc_project_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--sort' '--query' '-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--sort')
      return
      ;;
    '--query')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list-build-configs` subcommand.
function _picocli_bacon_pnc_project_listbuildconfigs() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--sort' '--query' '-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--sort')
      return
      ;;
    '--query')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list-builds` subcommand.
function _picocli_bacon_pnc_project_listbuilds() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'--latest' '--running-only' '-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--sort' '--query' '-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--sort')
      return
      ;;
    '--query')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `update` subcommand.
function _picocli_bacon_pnc_project_update() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--name' '--description' '--project-url' '--issue-tracker-url' '-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--name')
      return
      ;;
    '--description')
      return
      ;;
    '--project-url')
      return
      ;;
    '--issue-tracker-url')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `create-and-sync` subcommand.
function _picocli_bacon_pnc_scmrepository_createandsync() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'--no-pre-build-sync' '-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_bacon_pnc_scmrepository_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_bacon_pnc_scmrepository_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--sort' '--query' '--match-url' '--search-url' '-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--sort')
      return
      ;;
    '--query')
      return
      ;;
    '--match-url')
      return
      ;;
    '--search-url')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `update` subcommand.
function _picocli_bacon_pnc_scmrepository_update() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'--no-external-scm' '--pre-build' '-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--external-scm' '-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--external-scm')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list-build-configs` subcommand.
function _picocli_bacon_pnc_scmrepository_listbuildconfigs() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="'-o' '--jsonOutput' '--no-color' '-q' '--quiet' '-v' '--verbose' '-h' '--help' '-V' '--version'"
  local arg_opts="'--sort' '--query' '-p' '--configPath' '--profile'"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    '--sort')
      return
      ;;
    '--query')
      return
      ;;
    '-p'|'--configPath')
      return
      ;;
    '--profile')
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Define a completion specification (a compspec) for the
# `bacon`, `bacon.sh`, and `bacon.bash` commands.
# Uses the bash `complete` builtin (see [6]) to specify that shell function
# `_complete_bacon` is responsible for generating possible completions for the
# current word on the command line.
# The `-o default` option means that if the function generated no matches, the
# default Bash completions and the Readline default filename completions are performed.
complete -F _complete_bacon -o default bacon bacon.sh bacon.bash
